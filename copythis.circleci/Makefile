SHELL ?= /usr/bin/env bash
.SHELLFLAGS := -euo pipefail

# If there is a config file, include it.
# Otherwise, sensible defaults apply.
-include config.make

# Setup aliases for the main targets.
# We use aliases so that help text can reliably refer to these targets,
# and so that they can be overridden on a per-project basis to avoid
# conflicts etc.
#
# It is always recommended to use the same aliases for these targets
# in your top-level Makefile as well, so you can run the same make
# command from either directory.

# CONFIG_ALIAS is the name of the make target someone
# would invoke to update the main config file (config.yml).
CONFIG_ALIAS ?= ci-config

# VERIFY_ALIAS is the name of the make target someone
# would invoke to verify the config file.
VERIFY_ALIAS ?= ci-verify


CCI_INSTALL_LINK := https://circleci.com/docs/2.0/local-cli/\#installation
CCI_INSTALL_MSG := Please install CircleCI CLI. See $(CCI_INSTALL_LINK)
CCI_VERSION := $(shell circleci version 2> /dev/null)
ifneq ($(CCI_VERSION),)
CIRCLECI := circleci
else
# Attempting to use the CLI fails with installation instructions.
CIRCLECI := echo '$(CCI_INSTALL_MSG)'; exit 1; \#
endif

SOURCE_DIR     := config
SOURCE_YML     := $([ ! -d $(SOURCE_DIR) ] || shell find $(SOURCE_DIR) -name '*.yml')
CONFIG_SOURCE  := Makefile $(SOURCE_DIR) $(SOURCE_YML)
OUT            := config.yml
TMP            := .tmp/config-processed
CONFIG_PACKED  := .tmp/config-packed

default: help

help:
	@echo "Usage:"
	@echo "  make $(CONFIG_ALIAS): recompile config.yml from $(SOURCE_DIR)/"
	@echo "  make $(VERIFY_ALIAS): verify that config.yml is a true mapping from $(SOURCE_DIR)/"
	@echo
	@echo "Diagnostics:"
	@[ -z "$(CCI_VERSION)" ] || echo "  circleci-cli version $(CCI_VERSION)"
	@[ -n "$(CCI_VERSION)" ] || echo "  $(CCI_INSTALL_MSG)"

$(SOURCE_DIR):
	@echo No source directory $(SOURCE_DIR) found. Try make init.; exit 1

# Make sure our .tmp dir exists.
$(shell [ -d .tmp ] || mkdir .tmp)

.PHONY: $(CONFIG_ALIAS)
$(CONFIG_ALIAS): $(OUT)

.PHONY: $(VERIFY_ALIAS)
$(VERIFY_ALIAS): config-up-to-date
	@$(CIRCLECI) config validate $(OUT)

CONFIG_ROOT := $(SOURCE_DIR)/@$(SOURCE_DIR).yml

.PHONY: init
init: ## init creates just enough to allow make ci-config to run without error.
	@[ ! -d $(SOURCE_DIR) ] || { echo "Source directory $(SOURCE_DIR)/ already exists."; exit 1; }
	@mkdir -p $(SOURCE_DIR) $(SOURCE_DIR)/{jobs,commands,workflows}
	@printf -- "---\nversion: 2.1\njobs:\n" > $(CONFIG_ROOT)
	@echo File $(CONFIG_ROOT) created.

GENERATED_FILE_HEADER := \#\#\# Generated by 'make $(CONFIG_ALIAS)' with circleci-cli v$(CCI_VERSION) do not manually edit this file. 
define GEN_CONFIG
	@$(CIRCLECI) config pack $(SOURCE_DIR) > $(CONFIG_PACKED)
	@echo "$(GENERATED_FILE_HEADER)" > $@
	@$(CIRCLECI) config process $(CONFIG_PACKED) >> $@
endef

$(OUT): $(CONFIG_SOURCE) 
	$(GEN_CONFIG)
	@echo "$@ updated"

$(TMP): $(CONFIG_SOURCE) 
	$(GEN_CONFIG)

.PHONY: config-up-to-date
config-up-to-date: $(TMP) # Note this must not depend on $(OUT)!
	@if diff config.yml $<; then \
		echo "Generated $(OUT) is up to date!"; \
	else \
		echo "Generated $(OUT) is out of date, run make $(CONFIG_ALIAS) to update."; \
		exit 1; \
	fi
